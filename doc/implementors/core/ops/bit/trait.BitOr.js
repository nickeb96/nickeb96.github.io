(function() {var implementors = {};
implementors["lualite"] = [{"text":"impl&lt;Rhs:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"lualite/bytecode/instruction/struct.Instruction.html\" title=\"struct lualite::bytecode::instruction::Instruction\">Instruction</a>&gt;, const OFFSET:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt; for <a class=\"enum\" href=\"lualite/bytecode/opcode/common/enum.WhichSourceIsWild.html\" title=\"enum lualite::bytecode::opcode::common::WhichSourceIsWild\">WhichSourceIsWild</a>&lt;OFFSET&gt;","synthetic":false,"types":["lualite::bytecode::opcode::common::WhichSourceIsWild"]},{"text":"impl&lt;Rhs:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"lualite/bytecode/instruction/struct.Instruction.html\" title=\"struct lualite::bytecode::instruction::Instruction\">Instruction</a>&gt;, const OFFSET:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt; for <a class=\"enum\" href=\"lualite/bytecode/opcode/common/enum.WildSourceType.html\" title=\"enum lualite::bytecode::opcode::common::WildSourceType\">WildSourceType</a>&lt;OFFSET&gt;","synthetic":false,"types":["lualite::bytecode::opcode::common::WildSourceType"]},{"text":"impl&lt;Rhs:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"lualite/bytecode/instruction/struct.Instruction.html\" title=\"struct lualite::bytecode::instruction::Instruction\">Instruction</a>&gt;, const OFFSET:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt; for <a class=\"enum\" href=\"lualite/bytecode/opcode/common/enum.WildDestinationType.html\" title=\"enum lualite::bytecode::opcode::common::WildDestinationType\">WildDestinationType</a>&lt;OFFSET&gt;","synthetic":false,"types":["lualite::bytecode::opcode::common::WildDestinationType"]},{"text":"impl&lt;Rhs:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"lualite/bytecode/instruction/struct.Instruction.html\" title=\"struct lualite::bytecode::instruction::Instruction\">Instruction</a>&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt; for <a class=\"enum\" href=\"lualite/bytecode/opcode/enum.SuperCode.html\" title=\"enum lualite::bytecode::opcode::SuperCode\">SuperCode</a>","synthetic":false,"types":["lualite::bytecode::opcode::SuperCode"]},{"text":"impl&lt;Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt; for <a class=\"struct\" href=\"lualite/bytecode/instruction/struct.Instruction.html\" title=\"struct lualite::bytecode::instruction::Instruction\">Instruction</a> <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Rhs: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"lualite/bytecode/instruction/struct.Instruction.html\" title=\"struct lualite::bytecode::instruction::Instruction\">Instruction</a>&gt;,&nbsp;</span>","synthetic":false,"types":["lualite::bytecode::instruction::Instruction"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()